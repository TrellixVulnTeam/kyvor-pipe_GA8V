{"ast":null,"code":"/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n */\nimport camelizeStyleName from 'fbjs/lib/camelizeStyleName';\nimport dangerousStyleValue from './dangerousStyleValue';\nimport hyphenateStyleName from 'fbjs/lib/hyphenateStyleName';\nimport memoizeStringOnly from 'fbjs/lib/memoizeStringOnly';\nimport warning from 'fbjs/lib/warning';\nvar processStyleName = memoizeStringOnly(hyphenateStyleName);\n\nif (process.env.NODE_ENV !== 'production') {\n  var warnValidStyle;\n\n  (function () {\n    // 'msTransform' is correct, but the other prefixes should be capitalized\n    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/; // style values shouldn't contain a semicolon\n\n    var badStyleValueWithSemicolonPattern = /;\\s*$/;\n    var warnedStyleNames = {};\n    var warnedStyleValues = {};\n    var warnedForNaNValue = false;\n\n    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n        return;\n      }\n\n      warnedStyleNames[name] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;\n    };\n\n    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n        return;\n      }\n\n      warnedStyleNames[name] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;\n    };\n\n    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {\n      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n        return;\n      }\n\n      warnedStyleValues[value] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon.%s ' + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;\n    };\n\n    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {\n      if (warnedForNaNValue) {\n        return;\n      }\n\n      warnedForNaNValue = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;\n    };\n\n    var checkRenderMessage = function checkRenderMessage(owner) {\n      if (owner) {\n        var name = owner.getName();\n\n        if (name) {\n          return ' Check the render method of `' + name + '`.';\n        }\n      }\n\n      return '';\n    };\n    /**\n     * @param {string} name\n     * @param {*} value\n     * @param {ReactDOMComponent} component\n     */\n\n\n    warnValidStyle = function warnValidStyle(name, value, component) {\n      //eslint-disable-line no-var\n      var owner = void 0;\n\n      if (component) {\n        owner = component._currentElement._owner;\n      }\n\n      if (name.indexOf('-') > -1) {\n        warnHyphenatedStyleName(name, owner);\n      } else if (badVendoredStyleNamePattern.test(name)) {\n        warnBadVendoredStyleName(name, owner);\n      } else if (badStyleValueWithSemicolonPattern.test(value)) {\n        warnStyleValueWithSemicolon(name, value, owner);\n      }\n\n      if (typeof value === 'number' && isNaN(value)) {\n        warnStyleValueIsNaN(name, value, owner);\n      }\n    };\n  })();\n}\n/**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @param {ReactDOMComponent} component\n   * @return {?string}\n   */\n\n\nexport function createMarkupForStyles(styles, component) {\n  var serialized = '';\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var styleValue = styles[styleName];\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnValidStyle(styleName, styleValue, component);\n    }\n\n    if (styleValue != null) {\n      serialized += processStyleName(styleName) + ':';\n      serialized += dangerousStyleValue(styleName, styleValue, component) + ';';\n    }\n  }\n\n  return serialized || null;\n}","map":{"version":3,"sources":["/home/aravind/Desktop/DjangoProjects/djangoprojects/frontend/node_modules/glamor/es6/CSSPropertyOperations/index.js"],"names":["camelizeStyleName","dangerousStyleValue","hyphenateStyleName","memoizeStringOnly","warning","processStyleName","process","env","NODE_ENV","warnValidStyle","badVendoredStyleNamePattern","badStyleValueWithSemicolonPattern","warnedStyleNames","warnedStyleValues","warnedForNaNValue","warnHyphenatedStyleName","name","owner","hasOwnProperty","checkRenderMessage","warnBadVendoredStyleName","charAt","toUpperCase","slice","warnStyleValueWithSemicolon","value","replace","warnStyleValueIsNaN","getName","component","_currentElement","_owner","indexOf","test","isNaN","createMarkupForStyles","styles","serialized","styleName","styleValue"],"mappings":"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","sourcesContent":["/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule CSSPropertyOperations\n */\n\nimport camelizeStyleName from 'fbjs/lib/camelizeStyleName';\nimport dangerousStyleValue from './dangerousStyleValue';\nimport hyphenateStyleName from 'fbjs/lib/hyphenateStyleName';\nimport memoizeStringOnly from 'fbjs/lib/memoizeStringOnly';\nimport warning from 'fbjs/lib/warning';\n\nvar processStyleName = memoizeStringOnly(hyphenateStyleName);\n\nif (process.env.NODE_ENV !== 'production') {\n  var warnValidStyle;\n\n  (function () {\n    // 'msTransform' is correct, but the other prefixes should be capitalized\n    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n    // style values shouldn't contain a semicolon\n    var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n    var warnedStyleNames = {};\n    var warnedStyleValues = {};\n    var warnedForNaNValue = false;\n\n    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n        return;\n      }\n\n      warnedStyleNames[name] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?%s', name, camelizeStyleName(name), checkRenderMessage(owner)) : void 0;\n    };\n\n    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {\n      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n        return;\n      }\n\n      warnedStyleNames[name] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;\n    };\n\n    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {\n      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n        return;\n      }\n\n      warnedStyleValues[value] = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\\'t contain a semicolon.%s ' + 'Try \"%s: %s\" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;\n    };\n\n    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {\n      if (warnedForNaNValue) {\n        return;\n      }\n\n      warnedForNaNValue = true;\n      process.env.NODE_ENV !== 'production' ? warning(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;\n    };\n\n    var checkRenderMessage = function checkRenderMessage(owner) {\n      if (owner) {\n        var name = owner.getName();\n        if (name) {\n          return ' Check the render method of `' + name + '`.';\n        }\n      }\n      return '';\n    };\n\n    /**\n     * @param {string} name\n     * @param {*} value\n     * @param {ReactDOMComponent} component\n     */\n\n    warnValidStyle = function warnValidStyle(name, value, component) {\n      //eslint-disable-line no-var\n      var owner = void 0;\n      if (component) {\n        owner = component._currentElement._owner;\n      }\n      if (name.indexOf('-') > -1) {\n        warnHyphenatedStyleName(name, owner);\n      } else if (badVendoredStyleNamePattern.test(name)) {\n        warnBadVendoredStyleName(name, owner);\n      } else if (badStyleValueWithSemicolonPattern.test(value)) {\n        warnStyleValueWithSemicolon(name, value, owner);\n      }\n\n      if (typeof value === 'number' && isNaN(value)) {\n        warnStyleValueIsNaN(name, value, owner);\n      }\n    };\n  })();\n}\n\n/**\n   * Serializes a mapping of style properties for use as inline styles:\n   *\n   *   > createMarkupForStyles({width: '200px', height: 0})\n   *   \"width:200px;height:0;\"\n   *\n   * Undefined values are ignored so that declarative programming is easier.\n   * The result should be HTML-escaped before insertion into the DOM.\n   *\n   * @param {object} styles\n   * @param {ReactDOMComponent} component\n   * @return {?string}\n   */\n\nexport function createMarkupForStyles(styles, component) {\n  var serialized = '';\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n    var styleValue = styles[styleName];\n    if (process.env.NODE_ENV !== 'production') {\n      warnValidStyle(styleName, styleValue, component);\n    }\n    if (styleValue != null) {\n      serialized += processStyleName(styleName) + ':';\n      serialized += dangerousStyleValue(styleName, styleValue, component) + ';';\n    }\n  }\n  return serialized || null;\n}"]},"metadata":{},"sourceType":"module"}